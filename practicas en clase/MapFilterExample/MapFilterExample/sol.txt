package main

import (
	"fmt"
	"golang.org/x/exp/slices"
	"reflect"
)

type producto struct {
	nombre      string
	descripcion string
	montoVenta  int32
}

type Productos []producto

var factura Productos

const rangoPagoImpuestos = 20000
const porcentajeImpuesto = 0.13

func (f *Productos) agregarProducto(nom string, desc string, pre int32) {
	idx := slices.IndexFunc(*f, func(p producto) bool { return p.nombre == nom })
	if idx == -1 {
		*f = append(*f, producto{nom, desc, pre})
	} else {
		fmt.Println("cant add existing product to the list")
	}
}

func (f *Productos) calcularImpuestoFactura() int32 {
	lista := filter2(*f, func(p producto) bool {
		return p.montoVenta > rangoPagoImpuestos
	})
	lista2 := map2(lista, func(p producto) int32 {
		return int32(float64(p.montoVenta) * porcentajeImpuesto)
	})
	return reduce(lista2)
}

func (f *Productos) calcularMontoFactura() int32 {
	lista := map2(*f, func(p producto) int32 {
		return p.montoVenta
	})
	return reduce(lista)
}

// funciones map y filter para aplicaciones específicas
func map1(list Productos, f func(producto) int32) []int32 {
	mapped := make([]int32, len(list))

	for i, e := range list {
		mapped[i] = f(e)
	}
	return mapped
}

func filter1(list Productos, f func(producto) bool) Productos {
	filtered := make(Productos, 0)

	for _, element := range list {
		if f(element) {
			filtered = append(filtered, element)
		}
	}
	return filtered
}

func reduce(list []int32) int32 {
	var result int32 = 0
	for _, v := range list {
		result += v
	}
	return result
}

// Construir la versión con tipos genéricos de las tres funciones anteriores map1/filter1 para que que acepten slices y funciones de cualquier otro tipo. llámelas map2/filter2
// AYUDA AOBRE TIPOS GENERICOS: https://gobyexample.com/generics

// Probar su funcionamiento creando una lista/slice de personas y filtrando aquellas personas que sean mayores de edad
// Modifique el código anterior para cambiar el uso de map1 y filter1

func map2[P1, P2 any](list []P1, f func(P1) P2) []P2 {
	mapped := make([]P2, len(list))

	for i, e := range list {
		mapped[i] = f(e)
	}
	return mapped
}

func filter2[P1 any](list []P1, f func(P1) bool) []P1 {
	filtered := make([]P1, 0)

	for _, element := range list {
		if f(element) {
			filtered = append(filtered, element)
		}
	}
	return filtered
}

// ***************** OTRA IMPLEMENTACIÓN ****************
// Map aplica la función f a cada elemento de la lista y devuelve una nueva lista con los resultados
func map3(list any, f func(any) any) []any {
	result := make([]any, 0)
	switch reflect.TypeOf(list).Kind() {
	case reflect.Slice:
		s := reflect.ValueOf(list)
		for i := 0; i < s.Len(); i++ {
			result = append(result, f(s.Index(i).Interface()))
		}
	}
	return result
}

// Filter devuelve una nueva lista que contiene solo los elementos de la lista original para los cuales la función f devuelve verdadero
func filter3(list any, f func(any) bool) []any {
	result := make([]any, 0)
	switch reflect.TypeOf(list).Kind() {
	case reflect.Slice:
		s := reflect.ValueOf(list)
		for i := 0; i < s.Len(); i++ {
			if f(s.Index(i).Interface()) {
				result = append(result, s.Index(i).Interface())
			}
		}
	}
	return result
}

func reduce3(list []any) any {
	var result int32 = 0
	for _, v := range list {
		result += v.(int32)
	}
	return result
}

type persona struct {
	nombre string
	edad   int
}
type Personas []persona

var lPersonas Personas

func (p *Personas) mayoresEdad() Personas {
	return filter2(*p, mayorEdad)
}

func mayorEdad(p persona) bool {
	return p.edad > 18
}

func main() {
	factura.agregarProducto("tarjeta madre", "Asus", 54200)
	factura.agregarProducto("mouse", "alámbrico", 15000)
	factura.agregarProducto("teclado", "gamer con luces", 30000)
	factura.agregarProducto("memoria ssd", "2 gb", 65000)
	factura.agregarProducto("cable video", "display port 1m", 18000)

	println(factura.calcularMontoFactura())
	println(factura.calcularImpuestoFactura())
	lPersonas = append(lPersonas, persona{"oscar", 25})
	lPersonas = append(lPersonas, persona{"pedro", 15})
	lPersonas = append(lPersonas, persona{"maria", 17})
	lPersonas = append(lPersonas, persona{"lucia", 22})

	fmt.Println(lPersonas.mayoresEdad())
}